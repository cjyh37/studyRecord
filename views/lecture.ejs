<div class="bg-white shadow rounded-lg p-6">
  <h1 class="text-2xl font-bold mb-4">
    <%= lecture.title %>
  </h1>
  <div class="grid grid-cols-3 gap-8">
    <div class="col-span-2">
      <video id="lecture-video" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto">
        <source src="<%= lecture.videoUrl %>" type="video/mp4">
      </video>
      <div class="p-4 bg-gray-100 mt-4 rounded-lg">
        <p class="text-gray-600">
          <%= lecture.description %>
        </p>
      </div>
    </div>
    <div>
      <h2 class="text-xl font-bold mb-2">강의 목록</h2>
      <ul class="space-y-2">
        <% lectureList.forEach((item)=> { %>
          <li>
            <a href="/lecture/<%= item._id %>"
              class="block rounded-lg p-2 <%= item._id.toString() === lecture._id.toString() ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
              <%= item.title %>
            </a>
          </li>
          <% }); %>
      </ul>
      <div class="mt-4">
        <p class="text-gray-600">학습시간 : <span id="duration" class="font-bold">
            0:00:00
          </span></p>
        <button id="reset-button" class="mt-4 bg-red-500 text-white rounded-lg px-4 py-2">학습기록 초기화</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/video.js@7.10.2/dist/video.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var player = videojs('lecture-video');
    var learningId = '<%= learning._id %>';
    var lectureDuration = <%= lecture.duration %>;
    var learingDuration = <%= learning.duration %>;
    var userId = '<%= String(currentUser._id) %>';
    var learningRecordMethod = '<%= setting.learningRecordMethod %>';

    var currentTime = learingDuration || 0;
    var intervalId;
    var resetButton = document.getElementById('reset-button');

    // 비디오 플레이 버튼 클릭 시 학습 시간 업데이트 시작
    player.on('play', function () {
      startUpdatingLearningTime();
    });

    // 비디오 일시정지 시 학습 시간 업데이트 중지
    player.on('pause', function () {
      stopUpdatingLearningTime();
    });

    // 비디오 종료 시 학습 시간 업데이트 중지
    player.on('ended', function () {
      stopUpdatingLearningTime();
    });

    // 학습 시간 업데이트 시작
    function startUpdatingLearningTime() {
      intervalId = setInterval(updateLearningTime, 1000);
    }

    // 학습 시간 업데이트 중지
    function stopUpdatingLearningTime() {
      clearInterval(intervalId);
    }

    // 학습 시간 업데이트
    function updateLearningTime() {
      if (currentTime >= lectureDuration) {
        stopUpdatingLearningTime();
        return;
      }

      currentTime++;
      document.getElementById('duration').textContent = formatDuration(currentTime);

      if (learningRecordMethod === 'polling') {
        if (currentTime % 5 === 0) {
          saveLearningTimePolling();
        }
      } else if (learningRecordMethod === 'sse') {
        saveLearningTimeSSE();
      } else if (learningRecordMethod === 'socketio') {
        saveLearningTimeSocketIO();
      }
    }

    // Polling 방식으로 학습 시간 저장
    function saveLearningTimePolling() {
      fetch(`/lecture/api/learning/${learningId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ duration: currentTime }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Error saving learning time');
          }
        })
        .catch((error) => {
          console.error('Error saving learning time:', error);
        });
    }

    // SSE 방식으로 학습 시간 저장
    function saveLearningTimeSSE() {
      fetch(`/lecture/sse/${learningId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ duration: currentTime }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Error saving learning time');
          }
        })
        .catch((error) => {
          console.error('Error saving learning time:', error);
        });
    }

    // Socket.IO 방식으로 학습 시간 저장
    function saveLearningTimeSocketIO() {
      socket.emit('learning', {
        learningId: learningId,
        userId: userId,
        duration: currentTime,
      });
    }

    // 시간을 시간과 분 형식으로 변환하는 함수
    function formatDuration(duration) {
      var hours = Math.floor(duration / 3600);
      var minutes = Math.floor((duration % 3600) / 60);
      var seconds = duration % 60;
      return `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''
        }${seconds}`;
    }

    // 학습 기록 초기화 버튼 클릭 이벤트 처리
    resetButton.addEventListener('click', function () {
      resetLearningTime();
    });

    // 학습 기록 초기화
    function resetLearningTime() {
      fetch(`/lecture/api/learning/${learningId}`, {
        method: 'DELETE',
      })
        .then((response) => {
          if (response.ok) {
            currentTime = 0;
            document.getElementById('duration').textContent = formatDuration(currentTime);
            stopUpdatingLearningTime();

            location.reload();
          } else {
            throw new Error('Error resetting learning time');
          }
        })
        .catch((error) => {
          console.error('Error resetting learning time:', error);
        });
    }

    function init() {
      document.getElementById('duration').textContent = formatDuration(learingDuration);
    }

    init();
  });
</script>