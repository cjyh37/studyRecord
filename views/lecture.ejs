<div class="bg-white shadow rounded-lg p-6">
  <div class="md:flex">
    <h1 class="grow font-bold mb-4 text-xl md:text-2xl">
      <%= lecture.title %>
    </h1>
    <div class="mb-3 md:mb-0">
      <div class="clock clock-font bg-sky-500 px-3 py-1 text-xl md:text-2xl text-white rounded-lg">
        <span id="duration" class="font-bold">
          0:00:00
        </span>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
    <div class="md:col-span-2">
      <video id="lecture-video" class="rounded-lg video-js vjs-default-skin vjs-big-play-centered w-full"
        poster="<%= lecture.thumbnailUrl %>" controls>
        <source src="<%= process.env.mode == 'test' ? '/videos/sample.mp4' : lecture.videoUrl %>" type="video/mp4">
      </video>
      <div class="p-4 bg-gray-200 mt-4 rounded-lg">
        <p class="text-gray-500">
          <%= lecture.description %>
        </p>
      </div>
    </div>
    <div>
      <ul class="space-y-4">
        <% lectureList.forEach((item)=> { %>
          <li>
            <a href="/lecture/<%= item._id %>"
              class="block rounded-lg py-2 px-3 <%= item._id.toString() === lecture._id.toString() ? 'bg-gray-800 text-white' : 'bg-gray-100 hover:bg-gray-200' %>">
              <div class="flex justify-between items-center">
                <span>
                  <%= item.title %>
                </span>
                <span class="text-sm">
                  <%= formatDuration(item.duration) %>
                </span>
              </div>
              <div class="mt-1 relative">
                <div class="bg-gray-300 rounded-full h-1">
                  <% const learningRecord=learningRecords.find(record=> record.lectureId.toString() ===
                    item._id.toString()); %>
                    <div <%=item._id.toString()===lecture._id.toString() ? "id=current-lecture-progress" : "" %>
                      class="<%= (learningRecord && learningRecord.duration>= item.duration) ? 'bg-emerald-400' :
                        'bg-cyan-500' %> h-1
                        transition-all duration-500 ease-in-out rounded-full"
                        style="width: <%= learningRecord ? (learningRecord.duration / item.duration * 100) : 0 %>%">
                    </div>
                </div>
              </div>
            </a>
          </li>
          <% }); %>
      </ul>
      <div class="mt-4 flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2">
        <button id="reset-button" class="bg-gray-500 hover:bg-gray-700 text-white rounded-lg  px-4 py-2">학습기록
          초기화</button>
        <button id="clear-cache-button" class="bg-gray-500 hover:bg-gray-700 text-white rounded-lg px-4 py-2">캐시
          초기화</button>
      </div>
    </div>
  </div>
</div>

<script src="/videojs/video.min.js"></script>

<% if(setting.learningRecordMethod=='socketio' ) { %>
  <script src="/socket.io/socket.io.js"></script>
  <% } %>
    <script>
      document.addEventListener('DOMContentLoaded', function () {

        let socket;
        let eventSource;

        let learningId = '<%= learning._id %>';
        let lectureDuration = <%= lecture.duration %>;
        let learingDuration = <%= learning.duration %>;
        let userId = '<%= currentUser._id %>';
        let learningRecordMethod = '<%= setting.learningRecordMethod %>';

        let currentTime = learingDuration || 0;
        let intervalId;
        let isFirstPlay = true;
        let resetButton = document.getElementById('reset-button');
        let cacheClearButton = document.getElementById('clear-cache-button');

        let player = videojs('lecture-video', {
          autoplay: true,
          controls: true,
          preload: 'none',
        });

        // 비디오 플레이 버튼 클릭 시 학습 시간 업데이트 시작
        player.on('play', function () {
          
          // 현재 학습 시간부터 비디오 시작
          if (isFirstPlay) {
            player.currentTime(currentTime);
            isFirstPlay = false;
          }

          startUpdatingLearningTime();
        });

        player.on('canplay', function () {
          
        });

        // 비디오 일시정지 시 학습 시간 업데이트 중지
        player.on('pause', function () {
          stopUpdatingLearningTime();
        });

        // 비디오 종료 시 학습 시간 업데이트 중지
        player.on('ended', function () {
          stopUpdatingLearningTime();
        });

        // 캐시 삭제 버튼 클릭 이벤트 처리
        cacheClearButton.addEventListener('click', function () {
          fetch('/lecture/clear-cache', {
            method: 'POST',
          })
            .then(response => {
              if (response.ok) {
                console.log('Cache cleared successfully');
                location.reload();
              } else {
                console.error('Failed to clear cache');
              }
            })
            .catch(error => {
              console.error('Error clearing cache:', error);
            });
        });

        // 학습 기록 초기화 버튼 클릭 이벤트 처리
        resetButton.addEventListener('click', function () {
          resetLearningTime();
        });

        // 학습 시간 업데이트 시작
        function startUpdatingLearningTime() {
          intervalId = setInterval(updateLearningTime, 1000);
        }

        // 학습 시간 업데이트 중지
        function stopUpdatingLearningTime() {
          clearInterval(intervalId);

          if (eventSource) {
            eventSource.close();
            eventSource = null;
          }
        }

        // 강의 진행률 업데이트 함수
        function updateLectureProgress(duration) {
          const progressBar = document.getElementById('current-lecture-progress');
          const progress = (duration / lectureDuration) * 100;
          progressBar.style.width = progress + '%';
        }


        // 학습 시간 업데이트
        function updateLearningTime() {
          if (currentTime > lectureDuration) {
            stopUpdatingLearningTime();
            return;
          }

          currentTime++;

          if (learningRecordMethod === 'polling') {
            if (currentTime % 5 === 0) {
              saveLearningTimePolling();
            }
          } else if (learningRecordMethod === 'sse') {
            saveLearningTimeSSE();
          } else if (learningRecordMethod === 'socketio') {
            saveLearningTimeSocketIO();
          }

          document.getElementById('duration').textContent = formatDuration(currentTime);
          updateLectureProgress(currentTime);
        }

        // Polling 방식으로 학습 시간 저장
        function saveLearningTimePolling() {
          fetch(`/lecture/api/learning/${learningId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ duration: currentTime }),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error('Error saving learning time');
              }
            })
            .catch((error) => {
              console.error('Error saving learning time:', error);
            });
        }

        // SSE 방식으로 학습 시간 저장
        function saveLearningTimeSSE() {
          if (eventSource) return;

          eventSource = new EventSource(`/lecture/sse/${learningId}`);

          eventSource.onmessage = function (event) {
            const data = JSON.parse(event.data);
          };

          eventSource.onerror = function (error) {
            console.error('SSE error:', error);
            eventSource.close();
            eventSource = null;
          };
        }

        // Socket.IO 방식으로 학습 시간 저장
        function saveLearningTimeSocketIO() {
          if (!socket) socket = io();

          socket.emit('learning', {
            learningId: learningId,
            userId: userId,
            duration: currentTime,
          });
        }

        // 시간을 시간과 분 형식으로 변환하는 함수
        function formatDuration(duration) {
          var hours = Math.floor(duration / 3600);
          var minutes = Math.floor((duration % 3600) / 60);
          var seconds = duration % 60;
          return `${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''
            }${seconds}`;
        }

        // 학습 기록 초기화
        function resetLearningTime() {
          fetch(`/lecture/api/learning/${learningId}`, {
            method: 'DELETE',
          })
            .then((response) => {
              if (response.ok) {
                currentTime = 0;
                document.getElementById('duration').textContent = formatDuration(currentTime);
                stopUpdatingLearningTime();

                location.reload();
              } else {
                throw new Error('Error resetting learning time');
              }
            })
            .catch((error) => {
              console.error('Error resetting learning time:', error);
            });
        }

        function init() {
          document.getElementById('duration').textContent = formatDuration(learingDuration);
        }

        init();
      });
    </script>

    <% function formatDuration(duration) { var hours=Math.floor(duration / 3600); var minutes=Math.floor((duration %
      3600) / 60); var seconds=duration % 60; return `${hours}:${minutes < 10 ? '0' : '' }${minutes}:${seconds < 10
      ? '0' : '' }${seconds}`; } %>